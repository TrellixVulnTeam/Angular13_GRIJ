"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const operators_1 = require("rxjs/operators");
const JSPON = __importStar(require("jspon"));
class RefsInterceptor {
    static generateReferencesRequest(request) {
        if (!request.body || typeof request.body === 'string' || request.body instanceof FormData) {
            return request;
        }
        const newRequest = request.clone({
            body: RefsInterceptor.generateReferences(request.body),
            setHeaders: { 'Content-Type': 'application/json' },
        });
        return newRequest;
    }
    static generateReferences(input) {
        JSPON.setSettings({ idFieldName: '$id', preserveArrays: false });
        let newbody = JSPON.stringify(input);
        newbody = newbody.replace(/^"(.+(?="$))"$/, '$1'); // Remove starting and ending double quotes
        newbody = newbody.replaceAll(/"\$id":(\d+)/gi, '\"$$id\":\"$1\"'); // Put quotes around id numbers
        return newbody.replaceAll(/"\$ref":(\d+)/gi, '\"$$ref\":\"$1\"'); // Put quotes around ref numbers
    }
    static resolveReferences(json) {
        if (typeof json === 'string') {
            json = JSON.parse(json);
        }
        const byid = {}; // all objects by id
        const refs = []; // references to objects that could not be resolved
        json = (function recurse(obj, prop, parent) {
            if (typeof obj !== 'object' || !obj) { // a primitive value
                return obj;
            }
            if (Object.prototype.toString.call(obj) === '[object Array]') {
                for (let i = 0; i < obj.length; i++) {
                    // check also if the array element is not a primitive value
                    if (typeof obj[i] !== 'object' || !obj[i]) { // a primitive value
                        continue;
                    }
                    else if ('$ref' in obj[i]) {
                        obj[i] = recurse(obj[i], i, obj);
                    }
                    else {
                        obj[i] = recurse(obj[i], prop, obj);
                    }
                }
                return obj;
            }
            if ('$ref' in obj) { // a reference
                const ref2 = obj.$ref;
                if (ref2 in byid) {
                    return byid[ref2];
                }
                // else we have to make it lazy:
                refs.push([parent, prop, ref2]);
                return;
            }
            else if ('$id' in obj) {
                const id = obj.$id;
                delete obj.$id;
                if ('$values' in obj) { // an array
                    obj = obj.$values.map(recurse);
                }
                else { // a plain object
                    // tslint:disable-next-line: forin
                    for (const prop2 in obj) {
                        obj[prop2] = recurse(obj[prop2], prop2, obj);
                    }
                }
                byid[id] = obj;
            }
            return obj;
        })(json); // run it!
        for (const ref of refs) { // resolve previously unknown references
            ref[0][ref[1]] = byid[ref[2]];
            // Notice that this throws if you put in a reference at top-level
        }
        return json;
    }
    intercept(req, next) {
        return next.handle(RefsInterceptor.generateReferencesRequest(req)).pipe(operators_1.map(event => {
            // Cannot use instanceof because types from this package do not equal the types of the user
            // tslint:disable-next-line: no-string-literal
            if (event['status']) {
                event = event.clone({
                    body: RefsInterceptor.resolveReferences(event.body)
                });
            }
            return event;
        }));
    }
}
exports.RefsInterceptor = RefsInterceptor;
//# sourceMappingURL=refs.interceptor.js.map