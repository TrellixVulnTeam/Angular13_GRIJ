import * as i0 from '@angular/core';
import { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';
import * as Chartist from 'chartist';

/**
 * Angular component which renders Chartist chart.
 *
 * See Chartist {@link https://gionkunz.github.io/chartist-js/api-documentation.html API documentation} and
 * {@link https://gionkunz.github.io/chartist-js/examples.html examples} for more information.
 * ### Example
 ```html
 <x-chartist
   [type]="type"
   [data]="data"
   [options]="options"
   [responsiveOptions]="responsiveOptions"
   [events]="events"
 ></x-chartist>
 ```
 */
class ChartistComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        /**
         * Event emitted after Chartist chart has been initialized.
         *
         * Event handler function will receive chart instance argument.
         */
        this.initialized = new EventEmitter();
    }
    ngOnInit() {
        if (this.type && this.data) {
            this.renderChart();
        }
    }
    ngOnChanges(changes) {
        this.update(changes);
    }
    ngOnDestroy() {
        if (this.chart) {
            this.chart.detach();
            this.chart = null;
        }
    }
    renderChart() {
        const nativeElement = this.elementRef.nativeElement;
        if (!(this.type in Chartist)) {
            throw new Error(`${this.type} is not a valid chart type`);
        }
        // eslint-disable-next-line @typescript-eslint/naming-convention
        const Chart = Chartist[this.type];
        this.chart = new Chart(nativeElement, this.data, this.options, this.responsiveOptions);
        if (this.events) {
            this.bindEvents();
        }
        this.initialized.emit(this.chart);
    }
    update(changes) {
        if (!this.type || !this.data) {
            return;
        }
        if (!this.chart || "type" in changes) {
            this.renderChart();
        }
        else if (changes.data || changes.options) {
            this.chart.update(this.data, this.options);
        }
    }
    bindEvents() {
        for (const event of Object.keys(this.events)) {
            this.chart.on(event, this.events[event]);
        }
    }
}
ChartistComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.6", ngImport: i0, type: ChartistComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
ChartistComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.6", type: ChartistComponent, selector: "x-chartist", inputs: { data: "data", type: "type", options: "options", responsiveOptions: "responsiveOptions", events: "events" }, outputs: { initialized: "initialized" }, usesOnChanges: true, ngImport: i0, template: "", isInline: true, styles: [":host{display:block}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.6", ngImport: i0, type: ChartistComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "x-chartist",
                    template: "",
                    styles: [
                        `
      :host {
        display: block;
      }
    `,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { data: [{
                type: Input
            }], type: [{
                type: Input
            }], options: [{
                type: Input
            }], responsiveOptions: [{
                type: Input
            }], events: [{
                type: Input
            }], initialized: [{
                type: Output
            }] } });

class ChartistModule {
}
ChartistModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.6", ngImport: i0, type: ChartistModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ChartistModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.6", ngImport: i0, type: ChartistModule, declarations: [ChartistComponent], exports: [ChartistComponent] });
ChartistModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.6", ngImport: i0, type: ChartistModule, imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.6", ngImport: i0, type: ChartistModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ChartistComponent],
                    imports: [],
                    exports: [ChartistComponent],
                }]
        }] });

/*
 * Public API Surface of ng-chartist-lib
 */

/**
 * Generated bundle index. Do not edit.
 */

export { ChartistComponent, ChartistModule };
//# sourceMappingURL=ng-chartist.mjs.map
