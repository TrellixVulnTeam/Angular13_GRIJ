{"version":3,"file":"ng-chartist.mjs","sources":["../../../projects/ng-chartist/src/lib/chartist.component.ts","../../../projects/ng-chartist/src/lib/chartist.module.ts","../../../projects/ng-chartist/src/public-api.ts","../../../projects/ng-chartist/src/ng-chartist.ts"],"sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges,\n} from \"@angular/core\";\nimport * as Chartist from \"chartist\";\n\n/**\n * Possible chart types\n */\nexport type ChartType = \"Pie\" | \"Bar\" | \"Line\";\n\nexport type ChartInterfaces =\n  | Chartist.IChartistPieChart\n  | Chartist.IChartistBarChart\n  | Chartist.IChartistLineChart;\nexport type ChartOptions =\n  | Chartist.IBarChartOptions\n  | Chartist.ILineChartOptions\n  | Chartist.IPieChartOptions;\nexport type ResponsiveOptionTuple =\n  Chartist.IResponsiveOptionTuple<ChartOptions>;\nexport type ResponsiveOptions = ResponsiveOptionTuple[];\n\n/**\n * Represents chart events.\n */\nexport interface ChartEvent {\n  [eventName: string]: (data: any) => void;\n}\n\n/**\n * Angular component which renders Chartist chart.\n *\n * See Chartist {@link https://gionkunz.github.io/chartist-js/api-documentation.html API documentation} and\n * {@link https://gionkunz.github.io/chartist-js/examples.html examples} for more information.\n * ### Example\n ```html\n <x-chartist\n   [type]=\"type\"\n   [data]=\"data\"\n   [options]=\"options\"\n   [responsiveOptions]=\"responsiveOptions\"\n   [events]=\"events\"\n ></x-chartist>\n ```\n */\n@Component({\n  selector: \"x-chartist\",\n  template: \"\",\n  styles: [\n    `\n      :host {\n        display: block;\n      }\n    `,\n  ],\n})\nexport class ChartistComponent implements OnInit, OnChanges, OnDestroy {\n  /**\n   * The data object that needs to consist of a labels and a series array.\n   */\n  @Input()\n  data: Chartist.IChartistData;\n\n  /**\n   * Chartist chart type.\n   */\n  @Input()\n  type: ChartType;\n\n  /**\n   * The options object which overrides the default options.\n   */\n  @Input()\n  options: Chartist.IChartOptions;\n\n  /**\n   * An array of responsive option arrays which are a media query and options object pair: [[mediaQueryString, optionsObject],[more...]]\n   */\n  @Input()\n  responsiveOptions: ResponsiveOptions;\n\n  /**\n   * Events object where keys are Chartist event names and values are event handler functions.\n   *\n   * Supported events are: draw, optionsChanged, data, animationBegin, animationEnd, created.\n   *\n   * Event handler function will receive a data argument which contains event data.\n   */\n  @Input()\n  events: ChartEvent;\n\n  /**\n   * Event emitted after Chartist chart has been initialized.\n   *\n   * Event handler function will receive chart instance argument.\n   */\n  @Output()\n  initialized = new EventEmitter<ChartInterfaces>();\n\n  chart: ChartInterfaces;\n\n  constructor(private elementRef: ElementRef) {}\n\n  ngOnInit(): void {\n    if (this.type && this.data) {\n      this.renderChart();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update(changes);\n  }\n\n  ngOnDestroy(): void {\n    if (this.chart) {\n      this.chart.detach();\n      this.chart = null;\n    }\n  }\n\n  renderChart() {\n    const nativeElement = this.elementRef.nativeElement;\n\n    if (!(this.type in Chartist)) {\n      throw new Error(`${this.type} is not a valid chart type`);\n    }\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const Chart = Chartist[this.type];\n\n    this.chart = new Chart(\n      nativeElement,\n      this.data,\n      this.options,\n      this.responsiveOptions\n    );\n\n    if (this.events) {\n      this.bindEvents();\n    }\n\n    this.initialized.emit(this.chart);\n  }\n\n  update(changes: SimpleChanges): void {\n    if (!this.type || !this.data) {\n      return;\n    }\n\n    if (!this.chart || \"type\" in changes) {\n      this.renderChart();\n    } else if (changes.data || changes.options) {\n      this.chart.update(this.data, this.options);\n    }\n  }\n\n  bindEvents(): void {\n    for (const event of Object.keys(this.events)) {\n      this.chart.on(event, this.events[event]);\n    }\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { ChartistComponent } from \"./chartist.component\";\n\n@NgModule({\n  declarations: [ChartistComponent],\n  imports: [],\n  exports: [ChartistComponent],\n})\nexport class ChartistModule {}\n","/*\n * Public API Surface of ng-chartist-lib\n */\n\nexport * from \"./lib/chartist.component\";\nexport * from \"./lib/chartist.module\";\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;AAqCA;;;;;;;;;;;;;;;;MA2Ba,iBAAiB;IA6C5B,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;;;;;;QAJ1C,gBAAW,GAAG,IAAI,YAAY,EAAmB,CAAC;KAIJ;IAE9C,QAAQ;QACN,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;YAC1B,IAAI,CAAC,WAAW,EAAE,CAAC;SACpB;KACF;IAED,WAAW,CAAC,OAAsB;QAChC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;KACtB;IAED,WAAW;QACT,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;YACpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;SACnB;KACF;IAED,WAAW;QACT,MAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;QAEpD,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC,EAAE;YAC5B,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,4BAA4B,CAAC,CAAC;SAC3D;;QAED,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAElC,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CACpB,aAAa,EACb,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,iBAAiB,CACvB,CAAC;QAEF,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,IAAI,CAAC,UAAU,EAAE,CAAC;SACnB;QAED,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACnC;IAED,MAAM,CAAC,OAAsB;QAC3B,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YAC5B,OAAO;SACR;QAED,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,MAAM,IAAI,OAAO,EAAE;YACpC,IAAI,CAAC,WAAW,EAAE,CAAC;SACpB;aAAM,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,OAAO,EAAE;YAC1C,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SAC5C;KACF;IAED,UAAU;QACR,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YAC5C,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;SAC1C;KACF;;8GAvGU,iBAAiB;kGAAjB,iBAAiB,sOATlB,EAAE;2FASD,iBAAiB;kBAX7B,SAAS;mBAAC;oBACT,QAAQ,EAAE,YAAY;oBACtB,QAAQ,EAAE,EAAE;oBACZ,MAAM,EAAE;wBACN;;;;KAIC;qBACF;iBACF;iGAMC,IAAI;sBADH,KAAK;gBAON,IAAI;sBADH,KAAK;gBAON,OAAO;sBADN,KAAK;gBAON,iBAAiB;sBADhB,KAAK;gBAWN,MAAM;sBADL,KAAK;gBASN,WAAW;sBADV,MAAM;;;MChGI,cAAc;;2GAAd,cAAc;4GAAd,cAAc,iBAJV,iBAAiB,aAEtB,iBAAiB;4GAEhB,cAAc,YAHhB,EAAE;2FAGA,cAAc;kBAL1B,QAAQ;mBAAC;oBACR,YAAY,EAAE,CAAC,iBAAiB,CAAC;oBACjC,OAAO,EAAE,EAAE;oBACX,OAAO,EAAE,CAAC,iBAAiB,CAAC;iBAC7B;;;ACPD;;;;ACAA;;;;;;"}