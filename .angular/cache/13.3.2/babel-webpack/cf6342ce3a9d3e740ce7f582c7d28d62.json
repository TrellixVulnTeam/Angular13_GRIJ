{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport * as Chartist from 'chartist';\n/**\n * Angular component which renders Chartist chart.\n *\n * See Chartist {@link https://gionkunz.github.io/chartist-js/api-documentation.html API documentation} and\n * {@link https://gionkunz.github.io/chartist-js/examples.html examples} for more information.\n * ### Example\n ```html\n <x-chartist\n   [type]=\"type\"\n   [data]=\"data\"\n   [options]=\"options\"\n   [responsiveOptions]=\"responsiveOptions\"\n   [events]=\"events\"\n ></x-chartist>\n ```\n */\n\nclass ChartistComponent {\n  constructor(elementRef) {\n    this.elementRef = elementRef;\n    /**\n     * Event emitted after Chartist chart has been initialized.\n     *\n     * Event handler function will receive chart instance argument.\n     */\n\n    this.initialized = new EventEmitter();\n  }\n\n  ngOnInit() {\n    if (this.type && this.data) {\n      this.renderChart();\n    }\n  }\n\n  ngOnChanges(changes) {\n    this.update(changes);\n  }\n\n  ngOnDestroy() {\n    if (this.chart) {\n      this.chart.detach();\n      this.chart = null;\n    }\n  }\n\n  renderChart() {\n    const nativeElement = this.elementRef.nativeElement;\n\n    if (!(this.type in Chartist)) {\n      throw new Error(`${this.type} is not a valid chart type`);\n    } // eslint-disable-next-line @typescript-eslint/naming-convention\n\n\n    const Chart = Chartist[this.type];\n    this.chart = new Chart(nativeElement, this.data, this.options, this.responsiveOptions);\n\n    if (this.events) {\n      this.bindEvents();\n    }\n\n    this.initialized.emit(this.chart);\n  }\n\n  update(changes) {\n    if (!this.type || !this.data) {\n      return;\n    }\n\n    if (!this.chart || \"type\" in changes) {\n      this.renderChart();\n    } else if (changes.data || changes.options) {\n      this.chart.update(this.data, this.options);\n    }\n  }\n\n  bindEvents() {\n    for (const event of Object.keys(this.events)) {\n      this.chart.on(event, this.events[event]);\n    }\n  }\n\n}\n\nChartistComponent.ɵfac = function ChartistComponent_Factory(t) {\n  return new (t || ChartistComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nChartistComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ChartistComponent,\n  selectors: [[\"x-chartist\"]],\n  inputs: {\n    data: \"data\",\n    type: \"type\",\n    options: \"options\",\n    responsiveOptions: \"responsiveOptions\",\n    events: \"events\"\n  },\n  outputs: {\n    initialized: \"initialized\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function ChartistComponent_Template(rf, ctx) {},\n  styles: [\"[_nghost-%COMP%]{display:block}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartistComponent, [{\n    type: Component,\n    args: [{\n      selector: \"x-chartist\",\n      template: \"\",\n      styles: [`\n      :host {\n        display: block;\n      }\n    `]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    responsiveOptions: [{\n      type: Input\n    }],\n    events: [{\n      type: Input\n    }],\n    initialized: [{\n      type: Output\n    }]\n  });\n})();\n\nclass ChartistModule {}\n\nChartistModule.ɵfac = function ChartistModule_Factory(t) {\n  return new (t || ChartistModule)();\n};\n\nChartistModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ChartistModule\n});\nChartistModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartistModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [ChartistComponent],\n      imports: [],\n      exports: [ChartistComponent]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ng-chartist-lib\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ChartistComponent, ChartistModule };","map":{"version":3,"sources":["C:/Documentos/jose/bcp/Cursos NET/bcp/angularasignacion/node_modules/ng-chartist/fesm2015/ng-chartist.mjs"],"names":["i0","EventEmitter","Component","Input","Output","NgModule","Chartist","ChartistComponent","constructor","elementRef","initialized","ngOnInit","type","data","renderChart","ngOnChanges","changes","update","ngOnDestroy","chart","detach","nativeElement","Error","Chart","options","responsiveOptions","events","bindEvents","emit","event","Object","keys","on","ɵfac","ElementRef","ɵcmp","args","selector","template","styles","ChartistModule","ɵmod","ɵinj","declarations","imports","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport * as Chartist from 'chartist';\n\n/**\n * Angular component which renders Chartist chart.\n *\n * See Chartist {@link https://gionkunz.github.io/chartist-js/api-documentation.html API documentation} and\n * {@link https://gionkunz.github.io/chartist-js/examples.html examples} for more information.\n * ### Example\n ```html\n <x-chartist\n   [type]=\"type\"\n   [data]=\"data\"\n   [options]=\"options\"\n   [responsiveOptions]=\"responsiveOptions\"\n   [events]=\"events\"\n ></x-chartist>\n ```\n */\nclass ChartistComponent {\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n        /**\n         * Event emitted after Chartist chart has been initialized.\n         *\n         * Event handler function will receive chart instance argument.\n         */\n        this.initialized = new EventEmitter();\n    }\n    ngOnInit() {\n        if (this.type && this.data) {\n            this.renderChart();\n        }\n    }\n    ngOnChanges(changes) {\n        this.update(changes);\n    }\n    ngOnDestroy() {\n        if (this.chart) {\n            this.chart.detach();\n            this.chart = null;\n        }\n    }\n    renderChart() {\n        const nativeElement = this.elementRef.nativeElement;\n        if (!(this.type in Chartist)) {\n            throw new Error(`${this.type} is not a valid chart type`);\n        }\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        const Chart = Chartist[this.type];\n        this.chart = new Chart(nativeElement, this.data, this.options, this.responsiveOptions);\n        if (this.events) {\n            this.bindEvents();\n        }\n        this.initialized.emit(this.chart);\n    }\n    update(changes) {\n        if (!this.type || !this.data) {\n            return;\n        }\n        if (!this.chart || \"type\" in changes) {\n            this.renderChart();\n        }\n        else if (changes.data || changes.options) {\n            this.chart.update(this.data, this.options);\n        }\n    }\n    bindEvents() {\n        for (const event of Object.keys(this.events)) {\n            this.chart.on(event, this.events[event]);\n        }\n    }\n}\nChartistComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: ChartistComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nChartistComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.6\", type: ChartistComponent, selector: \"x-chartist\", inputs: { data: \"data\", type: \"type\", options: \"options\", responsiveOptions: \"responsiveOptions\", events: \"events\" }, outputs: { initialized: \"initialized\" }, usesOnChanges: true, ngImport: i0, template: \"\", isInline: true, styles: [\":host{display:block}\\n\"] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: ChartistComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"x-chartist\",\n                    template: \"\",\n                    styles: [\n                        `\n      :host {\n        display: block;\n      }\n    `,\n                    ],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], responsiveOptions: [{\n                type: Input\n            }], events: [{\n                type: Input\n            }], initialized: [{\n                type: Output\n            }] } });\n\nclass ChartistModule {\n}\nChartistModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: ChartistModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nChartistModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: ChartistModule, declarations: [ChartistComponent], exports: [ChartistComponent] });\nChartistModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: ChartistModule, imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: ChartistModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [ChartistComponent],\n                    imports: [],\n                    exports: [ChartistComponent],\n                }]\n        }] });\n\n/*\n * Public API Surface of ng-chartist-lib\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ChartistComponent, ChartistModule };\n"]},"metadata":{},"sourceType":"module"}